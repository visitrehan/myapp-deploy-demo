name: CI-CD Pipeline

on:
  push:
    branches: [ "main", "staging", "dev" ]
  workflow_dispatch:

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPO: ${{ secrets.ECR_REPO }}

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to ECR
      run: aws ecr get-login-password | docker login --username AWS --password-stdin $ECR_REPO

    - name: Build Docker image
      run: |
        IMAGE="$ECR_REPO:${{ github.sha }}"
        docker build -t $IMAGE .
        docker push $IMAGE
      env:
        ECR_REPO: ${{ env.ECR_REPO }}

    - name: Run DB Migrations (Flyway)
      run: |
        docker run --rm \
          -e FLYWAY_URL="jdbc:postgresql://${{ secrets.DB_HOST }}:5432/${{ secrets.DB_NAME }}" \
          -e FLYWAY_USER="${{ secrets.DB_USER }}" \
          -e FLYWAY_PASSWORD="${{ secrets.DB_PASSWORD }}" \
          -v ${{ github.workspace }}/db/migrations:/flyway/sql \
          flyway/flyway:9.0.0 migrate

  deploy_staging:
    needs: build_and_push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/staging'
    steps:
    - name: Deploy to ECS (staging)
      run: |
        aws ecs update-service --cluster my-cluster-staging --service my-service-staging --force-new-deployment

  deploy_prod:
    needs: build_and_push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
    steps:
    - name: Wait for manual approval
      uses: hmarr/approve-pull-request-action@v2
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}

    - name: Deploy to ECS (prod)
      run: |
        aws ecs update-service --cluster my-cluster-prod --service my-service-prod --force-new-deployment
